#define _CRT_SECURE_NO_WARNINGS

// HellowWorld.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

// 소스파일
// 주석(Comment) : 프로그램에 영향을 끼치지 않는 부분 (컴파일러가 무시하는 문장)
//

/*
Ctrl+D : 한줄 복제하기
Shift+Delete : 한줄 삭제하기
Shift+화살표 : 블럭 잡기
Alt+Shift+화살표 : 세로로 블럭 잡기
Ctrl+spcae : 자동완성기능(인텔리센스)창 띄우기
Alt+화살표위아래 : 현재 줄을 위아래로 옮기기 ㅠ
프로그램 디버그: <F5 키 또는 [디버그] > [디버깅 시작] 메뉴
Ctrl+B+B : 프로젝트 빌드
Ctrl+B+R : 프로젝트 리빌드
Ctrl+화살표 위아래 : 보이는 영역 올리고 내리기
Ctrl+화살표 좌우 : 단어 단위로 움직이기
Ctrl+K+C : 블럭 영역 전부 주석처리
Ctrl+K+U : 블럭 영역 전부 주석해제 처리
*/

/*
컴파일러 : 번역기(사람이 써 놓은 코드를 기계가 알아듣게 번역해줌)
 -> 목적코드 생성
  -> 링커가 연결해서 실행파일 생성
빌드 : 실행파일 생성하기
리빌드 : 전체 다시 빌드하기(정리+빌드)
*/

/*
변수(Variable)
 - 변하는 숫자
 - 컴퓨터에 값을 기억 시키기 위해 만들고 사용
*/

/*
연산자(Operator)
 - 계산을 하기 위한 기호
 - 대입 연산자
   =
   = 오른쪽에 있는 값을 왼쪽에 넣어라
   a = b; // b에 있는 값을 a에 넣어라
 - 산술 연산자
	사칙연산
	+(더하기) -(빼기) *(곱하기) /(나누기) %(나머지 연산)
	 a = 5%3;
	 a에는 2가 들어간다.( 5를 3으로 나누었을 때 나머지가 2 )
 - 복합 대입연산자
	줄여쓰기용
	a += b;		// 아래와 같은 코드
	a = a + b;
 - 증감 연산자
	a++;	// a에다가 1을 더해라.
	a--;	// a에다가 1을 빼라.
*/

/*
이진수(Binary)
 - 컴퓨터는 0과 1만 알수 있기 때문에 기본적으로 이진수를 사용

 int number = 10;	// 사람이 알아보기 위해 10진수로 값을 대입
					// 실제 메모리에는 0000 0000 0000 0000 0000 0000 0000 1010

 ex) 13 = 2^3 * 1 + 2^2 * 1 + 2^1 * 0 + 2^0 * 1 = 1101
*/

/*
데이터 타입
int : 정수형. 일반적으로 32bit. 범위는 (대략 -21억~+21억)
float : 실수형. 32bit. 태생적으로 오차가 있는 타입. 대략 총7자리부터 오차 발생
double : 실수형. 64bit.
bool : 불리언. true/false만 저장.
char : 캐릭터. 글자하나를 저장하는 데이터 타입. 8bit 정수형
	char alpha = 'a';	// 글자 하나만 저장
	char alpha2 = 64;
std::string : 스트링. 문자열을 쉽게 다룰 수 있는 자료형.
	문자열 : 글자 여러개가 연결된것
	std::string str = "Hello World!";
	char* str;
	char str[32];
*/

/*
상수(Constant)
 - 변하지 않는 수
 - 코드의 안정성과 가독성을 높여준다.
	(매직넘버 회피에 좋다)
	(매크로로와는 달리 타입체크가 가능하다)
*/

/*
비교연산자
 - 비교를 하는 연산자. 참이냐 거짓이냐가 결과로 나온다.
 - >, <, >=, <=, ==

 int a = 10;
 int b = 20;
 bool result = a > b;		// 결과는 거짓이니까 result = false;

 int a = 100;
 int b = 20;
 bool result = a > b;		// 결과는 참이니까 result = true;

 int a = 50;
 int b = 50;
 bool result = a == b;	// 결과는 참이니까 result = true;

 // ‘실수형 자료형은 비교 연산자를 사용하면 안 된다’ 가 맞을까요?
 // 정확하게 이야기하면 
    "값이 같은지를 비교하는 ==, <=, >=를 조심해서 사용해야 한다." 입니다.
*/

/*
제어문
 - 프로그램의 흐름을 제어하는 문(Statement)
  - 조건문 : 조건에 따라 프로그램의 흐름을 변경하는 문
	- if, else if, else
	- switch
	- 삼항연산자
  - 반복문 : 일정 조건에 따라 코드를 반복하는 문
*/

/*
논리 연산자
 - bool값을 받아 bool로 된 결과를 낸다.
&&	(And)	&&의 양쪽이 둘 다 true면 true. 그 외는 false
||	(Or)	||의 양쪽에 하나라도 true가 있으면 true, 아니면 false
!	(Not)	! 뒤의 bool이 true면 false, false면 true.
*/

/*
비트 연산자
&	(And)	두 비트가 모두 1이면 1, 아니면 0			
	특정 비트가 세팅이 되어 있는지 확인하는데 사용(플래그 검사)
	int a = 10;			// 0b1010
	int b = 9;			// 0b1001
	int c = a & b;		// 0b1000
|	(Or)	두 비트가 하나라도 1이면 1, 둘 다 0이면 0
	특정 비트에 플래그를 세팅하고 싶을 때 사용(플래그 설정)
	int a = 10;			// 0b1010
	int b = 9;			// 0b1001
	int c = a | b;		// 0b1011
^	(XOR)	두 비트가 서로 다르면 1, 같으면 0
	특정 비트를 토글하고 싶을 때 사용
	int a = 10;			// 0b1010
	int b = 9;			// 0b1001
	int c = a ^ b;		// 0b0011
~	(Not)	비트값을 반전 시킨다(0->1, 1->0)
	int a = 10;			// 0b1010
	a = ~a;				// 0b0101
<<	(Left Shift)	비트들을 왼쪽으로 이동
	한번 움직일 때마다 수가 두배가 된다.
	int a = 7;			// 0b0111
	a = a << 1;			// 0b1110
>>	(Right Shift)	비트들을 오른쪽으로 이동
	한번 움직일 때마다 수가 절반이 된다.
	int a = 7;			// 0b0111
	a = a >> 1;			// 0b0011
*/

/*
반복문
 - 제어문 중의 하나
 - 특정 코드 블록을 조건에 따라 여러번 반복해서 실행할 수 있게 해주는 문
 for		반복 회수가 명확할 때 좋음
 while		반복 회수가 명확하지 않고 조건에 따라 반복할 때 사용
 do-while	최소 한번은 무조건 실행해야 할 때 사용.(while과 거의 같음)
*/

/*
* continue
*	- 반복문 안에서 사용
*	- continue를 만나면 그 이후의 코드는 스킵하고 다음 반복을 진행
* break
*	- 반복문이나 switch문에서 반복문을 벗어나거나 case를 종료시킨다.
*/

/*
* 랜덤
*  - 무작위로 숫자를 선택하는 법
*  - C 스타일
*		- rand();			함수 활용
*		- srand(time(0));	시드값 설정
*  - C++ 스타일
*		- #include <random>
*		- c스타일보다 많은 기능을 제공한다.
*/

/*
* 함수(Function)
*  - 특정한 기능을 수행하는 코드블럭
*  - 선언을 하고 사용해야 한다. 
*		->함수의 리턴타입, 함수의 이름, 함수의 파라메터를 설정해줘야 한다.
		함수의 리턴타입 : 함수가 끝났을 때 돌려 받을 값의 종류
		함수의 이름 : 함수를 호출(사용)하고 싶을 때 부르는 이름
		함수의 파라메터 : 함수의 입력값. 0개 이상 들어갈 수 있다.
	- 선언을 한 후에는 구현을 정의해야한다.(함수의 실제 동작을 작성)
*/

/*
* 재귀 호출(Recurcive Call)
*  - 함수 안에서 자기자신을 다시 호출하는 함수
*/

/*
* 템플릿(Template) 함수
*  - 데이터 타입에 관계 없이 동일한 로직을 여러 자료형에 대해 사용할 수 있게 해주는 C++의 기능
*  - 컴파일 타임에 실제 사용하는 곳이 있으면 해당 타입으로 코드를 생성한다.
*		-> 해더에 선언과 구현이 함께 있어야 한다.
*/

/*
* 인라인(inline) 함수
*	- 함수 호출문을 해당 함수의 실제 코드로 대체하는 함수
*/

/*
* 스코프
*  - 변수, 함수, 객체등이 유효하게 사용될 수 있는 범위
*  - 일반적으로 선언된 중괄호 안쪽에서만 유효
*  - 지역 변수 : 특정 함수 내에서 선언된 변수
*  - 전역 변수 : 프로그램 전체에서 사용할 수 있는 변수
*/


#include <iostream>	// 입출력 관련(cout)
#include <stdio.h>
#include <time.h>
#include <cstdio>	// stdio.h에 네임스페이스 추가한 래퍼
#include <random>
#include "header.h"
#include "TestMath.h"

int global = 10;
//using namespace std;

int main() // 엔트리 포인트(코드가 시작되는 곳)
{
	int Number = Sum(1, 7);	// Sum함수를 호출했다. 파라메터로 1과 7을 넘겼다. 그리고 8을 돌려받았다.

	Number = Multiply(2, 3);
	Number = Multiply(7);

	// 
	//TestRecurcive(5);

	float Number2 = Add(10.5f, 20.4f);

	Add(1, 3);

	int Number3 = Square(2);
	int Number4 = Number * Number;

	for (int i = 0; i < 10; i++)
	{

	}


	for (int i = 0; i < 5; i++)
	{

	}

	global = 1000;

	// TestMath에 사칙연산용 템플릿 함수 4개 만들기 

	getchar();
	getchar();

	return 0;
}

void Test()
{
	global = 100;
}
// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴


// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
